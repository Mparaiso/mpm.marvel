// Generated by CoffeeScript 1.7.1
"use strict";
var async, cache, request, url,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

request = require('./request');

async = require('async');

url = require('url');


/* 
@namespace
 */

cache = exports;

cache.defaultDuration = 1000 * 60 * 60 * 24 * 3;

cache.Mongoose = (function(_super) {
  __extends(Mongoose, _super);


  /*
  	Mongoose based request cache.
  	@param {Mongoose} mongoose a mongoose connection
  	@param {String} collectionName name of the collection
  	@param {String} duration duration in ms,default is 3 days
   */

  function Mongoose(mongoose, collectionName, duration) {
    this.mongoose = mongoose;
    this.collectionName = collectionName != null ? collectionName : "Entity";
    this.duration = duration != null ? duration : cache.defaultDuration;
    if (!(this instanceof cache.Mongoose)) {
      return new cache.Mongoose(this.mongoose, this.collectionName, this.duration);
    } else {
      if (!this.mongoose.models[this.collectionName]) {
        this.EntrySchema = this.mongoose.Schema({
          uri: Object,
          created_at: {
            type: Date,
            "default": Date.now
          },
          expires_at: {
            type: Date,
            "default": (function(_this) {
              return function() {
                return Date.now() + _this.duration;
              };
            })(this)
          },
          data: Object
        });
        this.Entry = this.mongoose.model(this.collectionName, this.EntrySchema);
      } else {
        this.Entry = this.mongoose.model(this.collectionName);
      }
    }
  }

  Mongoose.prototype.execute = function(uri, callback) {
    var onApiRequest, onEntrySave, onMongooseRequest, parsedUri;
    parsedUri = url.parse(uri);
    delete parsedUri.query.ts;
    delete parsedUri.query.hash;
    delete parsedUri.apikey;
    onMongooseRequest = (function(_this) {
      return function(err, res) {
        if (err) {
          return callback(err);
        } else if (!res) {
          return _this.request(uri, onApiRequest);
        } else {
          return callback(void 0, res);
        }
      };
    })(this);
    onApiRequest = (function(_this) {
      return function(err, res, body) {
        var entry;
        if (err) {
          return callback(err);
        } else {
          entry = new _this.Entry({
            uri: parsedUri,
            data: body.data
          });
          return entry.save(onEntrySave);
        }
      };
    })(this);
    onEntrySave = (function(_this) {
      return function(err, res) {
        return callback(err, res || void 0);
      };
    })(this);
    return this.Entry.findOne({
      uri: parsedUri,
      expires_at: {
        "$gte": Date.now()
      }
    }, onMongooseRequest);
  };

  return Mongoose;

})(request.Request);
