// Generated by CoffeeScript 1.7.1
"use strict";

/*
@author mparaiso <mparaiso@online.fr>
@license LGPL
 */
var cache, request, url,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

request = require('./request');

url = require('url');


/* 
@namespace
 */

cache = exports;


/* default duration is 3 days */

cache.defaultDuration = 1000 * 60 * 60 * 24 * 3;

cache.Mongoose = (function(_super) {
  __extends(Mongoose, _super);


  /*
  Mongoose request cache strategy
  @param {Mongoose} mongoose a mongoose instance
  @param {String} collectionName name of the collection
  @param {String} duration duration in ms,default is 3 days
   */

  function Mongoose(mongoose, collectionName, duration) {
    this.mongoose = mongoose;
    this.collectionName = collectionName != null ? collectionName : "Entry";
    this.duration = duration != null ? duration : cache.defaultDuration;
    this.onEntrySave = __bind(this.onEntrySave, this);
    if (!(this instanceof cache.Mongoose)) {
      return new cache.Mongoose(this.mongoose, this.collectionName, this.duration);
    } else {
      if (!this.mongoose.models[this.collectionName]) {
        this.EntrySchema = this.mongoose.Schema({
          uri: Object,
          created_at: {
            type: Date,
            "default": Date.now
          },
          expires_at: {
            type: Date,
            "default": (function(_this) {
              return function() {
                return Date.now() + _this.duration;
              };
            })(this)
          },
          data: Object
        });
        this.Entry = this.mongoose.model(this.collectionName, this.EntrySchema);
      } else {
        this.Entry = this.mongoose.model(this.collectionName);
      }
    }
  }


  /*
  execute cached request
  @param  {String} @uri   
  @param  {Function} @callback
   */

  Mongoose.prototype.execute = function(uri, callback) {
    this.uri = uri;
    this.callback = callback;
    this.parsedUri = url.parse(this.uri);
    delete this.parsedUri.query.ts;
    delete this.parsedUri.query.hash;
    delete this.parsedUri.apikey;
    return this.Entry.findOne({
      uri: this.parsedUri,
      expires_at: {
        "$gte": Date.now()
      }
    }, this.onMongooseQuery.bind(this));
  };


  /* 
  event listener for mongoose query
   */

  Mongoose.prototype.onMongooseQuery = function(err, res) {
    if (err) {
      return this.callback(err);
    } else if (!res) {
      return this.request(this.uri, this.onApiRequest.bind(this));
    } else {
      return this.callback(void 0, res);
    }
  };


  /* 
  event listener for api query
   */

  Mongoose.prototype.onApiRequest = function(err, res, body) {
    var entry;
    if (err) {
      return this.callback(err);
    } else {
      entry = new this.Entry({
        uri: this.parsedUri,
        data: body
      });
      return entry.save(this.onEntrySave.bind(this));
    }
  };


  /* 
  event listener one mongoose save
   */

  Mongoose.prototype.onEntrySave = function(err, res) {
    return this.callback(err, res.data || void 0);
  };

  return Mongoose;

})(request.Request);

//# sourceMappingURL=cache.map
